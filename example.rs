
extern crate ramp;
extern crate primality;

use ramp::Int;
use std::str::FromStr;

use primality::{
    jacobi_symbol,
    number_of_bits,
    number_of_digits,
    rabin_miller,
    get_rabin_miller_probability,
};


fn main(){
    let target = &Int::from_str("9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999499999").unwrap();
    let target_len = number_of_digits(target);
    let number_of_rounds = 32;
    println!("Number of digits: {}\n", target_len);
    println!("Number of bits(min): {}  Number of bits(max): {}\n", number_of_bits(target_len).0, number_of_bits(target_len).1);
    println!("Probability:  {}", get_rabin_miller_probability(3312, number_of_rounds).unwrap());
    if rabin_miller(target, number_of_rounds)
    {
        println!("Number {} is prime",target);
    }
    else
    {
        println!("Number {} is not prime",target);
    }
    println!("{}",jacobi_symbol(&Int::from(45455), &Int::from(54547)).unwrap() );
}
